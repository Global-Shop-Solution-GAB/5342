Program.Sub.ScreenSU.Start
Program.Sub.ScreenSU.End

Program.Sub.Preflight.Start
v.Global.iRefresh_Rate.Declare
Program.Sub.Preflight.End

Program.Sub.Main.Start
'BN, Dec 27, 2018
'This project will create trueview web pages that is similar with the screen: On Line System > View > Current Work in Progress (No Dollars)
'User will maintain the selection in this script: Department + Employee Group (Employee_MSTR.Pr_Balance_Group) + Shift + Scroll(table body scroll feature)
'The Maintenance program will be run from On Line System > Administration > Maintenance - Current WO in Progress Trueview - 5342
'The TrueView one time open will be run from On Line System > View > TrueView - Current WO in Progress (No Dollars) - 5342
f.Intrinsic.Control.Try
	v.Local..BulkDeclareString(sError,sRet)
	v.Local..BulkDeclareLong(iHour,iSleep)
	v.Local.sNow.Declare
	v.Local.iMinuteUnload.Declare
	v.Local.sStandAlone.Declare
	v.Local.iPIDReturn.Declare
	v.Local.sIsSomeOneRunning.Declare
	v.Local.sPID.Declare
	v.Local.bEx.Declare
	v.Local.sHold.Declare	

	f.ODBC.Connection!conx.OpenCompanyConnection(1000)	

	'Loop based on the iSleep time. Condition to stop: if past 11pm, then unload, or if switch = 'O' (run once from a custom menu item setup with switch 'O') then unload.
	F.Intrinsic.Control.Do			
		'Get Refresh Time or set default refresh time to 120
		f.ODBC.Connection!conx.ExecuteAndReturn("Select Top 1 RefreshTime from GCG_5342_Selection",v.Local.sRet)
		f.Intrinsic.Control.If(v.Local.sRet,=,"")
			v.Global.iRefresh_Rate.Set(120000)
		f.Intrinsic.Control.Else
			f.Intrinsic.Math.Mult(v.Local.sRet,1000,v.Global.iRefresh_Rate)
		f.Intrinsic.Control.EndIf
	
		'Check the time and see if it is past 11:57 pm for Carwil as they work around the clock. The maintenance will be reloaded at 12:00 am
		f.Intrinsic.String.Format(v.Ambient.Now,"HHMMSS",v.Local.sNow)
		v.Local.iMinuteUnload.Set(v.Local.sNow.left4)
		f.Intrinsic.Control.If(v.Local.iMinuteUnload,>=,2345)
			f.Intrinsic.Control.CallSub("Unload")		
		F.Intrinsic.Control.Else

			'Check if some other instance is running to avoid overlaping
			F.Global.Registry.ReadValue("SUPERVSR",V.Caller.CompanyCode,"ONERUNNING",5342,"2002",5,"",V.Local.sIsSomeOneRunning)	
			f.Intrinsic.String.Split(v.Local.sIsSomeOneRunning.Trim,"*!*",v.Local.sHold)
			v.Local.sPID.Set(v.Local.sHold(0).Trim)
			f.Intrinsic.Task.PIDRunning(v.Local.sPID,v.Local.bEx)
			f.Intrinsic.Control.If(v.Local.bEx,=,True,and,v.Local.sPID.Trim,<>,"")
				f.Intrinsic.UI.Sleep(30)
			f.Intrinsic.Control.else
				f.Intrinsic.String.Build("{0}\GCG_5342_Generate_HTML_Alone.g2u",v.Caller.GasDir,v.Local.sStandAlone)			
				function.Global.General.CallAsyncGAS(v.Local.sStandAlone,v.Caller.Switches,v.Local.iPIDReturn)	
			f.Intrinsic.Control.EndIf
		
			'This is to run once if lauched from a custom menu item with switch 'O'
			F.Intrinsic.Control.If(V.Caller.Switches,=,"O")
				f.Intrinsic.Control.CallSub("Unload")
			F.Intrinsic.Control.EndIf				
			f.Intrinsic.Math.Div(v.Global.iRefresh_Rate,1000,v.Local.iSleep)		
			F.Intrinsic.UI.Sleep(v.Local.iSleep)
		F.Intrinsic.Control.EndIf
	F.Intrinsic.Control.Loop

F.Intrinsic.Control.Catch
	F.Intrinsic.String.Build("Project: {0}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}{1}GAB Version: {5}}",V.Ambient.ScriptPath,V.Ambient.Newline,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Ambient.GABVersion,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)	
	f.Intrinsic.Control.CallSub("Unload")
F.Intrinsic.Control.EndTry
Program.Sub.Main.End

Program.Sub.Unload.Start
f.Intrinsic.Control.Try
	V.Local.sError.Declare
	
	f.Intrinsic.Control.If(v.ODBC.conx.Exists,=,1)
		F.ODBC.Connection!conX.close
	f.Intrinsic.Control.EndIf
	
	F.Intrinsic.Control.End

F.Intrinsic.Control.Catch
	F.Intrinsic.String.Build("Project: {0}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}{1}GAB Version: {5}}",V.Ambient.ScriptPath,V.Ambient.Newline,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Ambient.GABVersion,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	f.Intrinsic.Control.End
F.Intrinsic.Control.EndTry
Program.Sub.Unload.End

